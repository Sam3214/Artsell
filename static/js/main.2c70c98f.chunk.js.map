{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["ipfs","require","ipfsClient","host","port","protocol","fm","Fortmatic","App","props","captureFile","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","onSubmit","name","productName","value","price","web3","utils","toWei","productPrice","toString","add","error","ipfsHash","hash","createProduct","handleLogoutUser","user","logout","account","productCount","products","privatekey","loading","balanceacc","bind","purchaseProduct","configure","primaryLoginOption","then","login","eth","getAccounts","accounts","this","getBalance","Balance","fromWei","Bal","net","getId","networkId","networkData","Artsell","networks","artsell","Contract","abi","address","methods","call","i","product","alert","ethereum","Web3","enable","currentProvider","getProvider","loadWeb3","loadBlockchainData","memeHash","send","from","once","receipt","id","class","className","role","align","type","ref","input","placeholder","required","onChange","map","key","owner","src","width","height","alt","purchased","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c70c98f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Artsell from '../abis/Artsell.json';\n/*import logo from '../logo.jpg';*/\nimport Fortmatic from 'fortmatic'; \n\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\nconst fm = new Fortmatic('pk_test_3ECE8EAF006F451A','kovan');\n\n\n\nclass App extends Component \n{\n  \n  constructor(props) \n  {\n    super(props)\n\n    this.state = \n    {\n      account: '',\n      productCount: 0,\n      products: [],\n      privatekey:'',\n      loading: true,\n      buffer:null,\n      web3:null,\n      file:null,\n      ipfsHash:null,\n      balanceacc:null\n    };\n\n    this.createProduct = this.createProduct.bind(this)\n    this.purchaseProduct = this.purchaseProduct.bind(this)\n  }\n\n\n  \n\n  async loadBlockchainData() \n  {\n    const web3=window.web3\n    // Load account\n    fm.configure({ primaryLoginOption: 'phone' }).then(() => {\n    fm.user.login().then(() => {\n     web3.eth.getAccounts().then(console.log);// ['0x...']\n      });\n    });\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const Balance =await web3.eth.getBalance(accounts[0])\n    const Bal = await web3.utils.fromWei(Balance.toString(), 'Ether')\n    this.setState({ balanceacc : Bal })\n    const networkId = await web3.eth.net.getId()\n    const networkData = Artsell.networks[networkId]\n    if(networkData) \n    {\n      const artsell = web3.eth.Contract(Artsell.abi, networkData.address)\n      this.setState({ artsell })\n      const productCount = await artsell.methods.productCount().call()\n      this.setState({ productCount })\n      // Load products\n      for (var i = 1; i <= productCount; i++) \n      {\n        const product = await artsell.methods.products(i).call()\n        this.setState({products: [...this.state.products, product]})\n      }\n      this.setState({ loading: false})\n    } \n    else \n    {\n      window.alert('Artsell contract not deployed to detected network.')\n    }\n  }\n\n\n  async loadWeb3() \n  {\n    if (window.ethereum) \n    {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) \n    {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else \n    {\n      window.web3 = new Web3(fm.getProvider());\n    }\n  }\n\n   async componentWillMount()\n  {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n   captureFile = (event) => \n   {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => \n    {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }  \n\n  onSubmit = (event) => \n  {\n    event.preventDefault()\n    console.log(\"Submitting file to ipfs...\")\n     const name = this.productName.value\n    const price = window.web3.utils.toWei(this.productPrice.value.toString(), 'Ether')\n    ipfs.add(this.state.buffer, (error, result) => \n    {\n      console.log('Ipfs result', result)\n      if(error) \n      {\n        console.error(error)\n        return\n      }\n      this.setState({ipfsHash:result[0].hash})\n      this.createProduct(name, price, \"https://ipfs.io/ipfs/\" + result[0].hash)\n    })\n  }\n\n  handleLogoutUser = () => {\n    fm.user.logout();\n  }\n\n\n  createProduct(name, price,memeHash) \n  {\n    this.setState({ loading: true })\n\n    this.state.artsell.methods.createProduct(name, price,memeHash).send({ from: this.state.account }).once('receipt', (receipt) =>\n     {\n      this.setState({ loading: false })\n    })\n  }\n\n  purchaseProduct(id, price) \n  {\n    this.setState({ loading: true })\n    this.state.artsell.methods.purchaseProduct(id).send({ from: this.state.account, value: price }).once('receipt', (receipt) => \n    {\n      this.setState({ loading: false })\n    })\n    /*var emid=window.prompt(\"Enter email ID :\")\n    const nodemailer = require('nodemailer');\n    const transporter = nodemailer.createTransport({\n    service: 'gmail',\n      auth: {\n        user: 'artinside3214@gmail.com',\n        pass: '123@PiPl'\n      }\n    });\n    var mailOptions = {\n      from: 'artinside3214@gmail.com',\n      to: emid,\n      subject: 'Thank you for payment',\n      text: 'Hash key =>https://ipfs.io/ipfs/ {this.state.ipfsHash}'\n    }\n    transporter.sendMail(mailOptions, function(error, info){\n      if (error) {\n        console.log(error);\n      } \n      else {\n        console.log('Email sent: ' + info.response);\n      }\n    });\n    */\n  }\n\n  render() \n  {\n    return (\n\n      <div>\n  \n      \n       <div class=\"navbar\">\n          \n          \n              <small className=\"text-white\"><span id=\"account\"><h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Account </b>:&nbsp;{this.state.account}</h4></span></small>\n            \n          \n           <small className=\"text-white\"><span id=\"account\"><h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Balance</b>:&nbsp;&nbsp;{this.state.balanceacc}&nbsp;Ether</h4></span></small>\n              \n          \n        </div>\n        <div>\n        \n\n\n      \n          <main role=\"main\">    \n          <div align=\"center\">    \n          <div className=\"content\" align=\"center\">\n                <p>\n                &nbsp;&nbsp;&nbsp;\n                 &nbsp;&nbsp;&nbsp;\n          </p>\n         \n          <table className=\"table\" align=\"center\">\n           <p>\n                &nbsp;&nbsp;&nbsp;\n                 &nbsp;&nbsp;&nbsp;\n          </p>\n          <p>\n                &nbsp;&nbsp;&nbsp;\n                 &nbsp;&nbsp;&nbsp;\n          </p>\n          <p>\n                &nbsp;&nbsp;&nbsp;\n                 &nbsp;&nbsp;&nbsp;\n          </p>\n          <div id=\"rap\">\n              <h5>ADD ART</h5>\n              \n              <form onSubmit={this.onSubmit} >\n                \n                <div className=\"form-group mr-sm-2\">\n                  <input\n                  id=\"productName\"\n                  type=\"text\"\n                  ref={(input) => { this.productName = input }}\n                  className=\"form-control\"\n                  placeholder=\"Email ID\"\n                  required />\n                </div>\n\n                <div className=\"form-group mr-sm-2\">\n                  <input\n                  id=\"productPrice\"\n                  type=\"text\"\n                  ref={(input) => { this.productPrice = input }}\n                  className=\"form-control\"\n                  placeholder=\"Product Price\"\n                  required />\n                </div>\n\n                <div className=\"form-group mr-sm-2\">\n                  <input \n                    id=\"productPic\"\n                    className=\"form-control\" \n                    type=\"file\" \n                    onChange={this.captureFile} \n                    required/>\n                </div>  \n                <center><button type=\"submit\" className=\"btn btn-primary\">Add ART</button>  </center>    \n              </form>\n               <p>\n                &nbsp;&nbsp;&nbsp;\n                 &nbsp;&nbsp;&nbsp;\n          </p>\n          <p>\n                &nbsp;&nbsp;&nbsp;\n                 &nbsp;&nbsp;&nbsp;\n          </p>\n          </div>   \n            <tbody id=\"productList\" align=\"center\">\n             <center><h2 align=\"center\">BUY ART</h2></center>\n            { this.state.products.map((product,key) => \n              {\n                return(\n                  <p key={key}>\n                  <table>\n                  <tr>\n                  <td><p id=\"rcorners2\">{product.name}</p></td>\n                  <td></td>\n                  <td></td>\n                  <td><b>Owner:</b><u>{product.owner}</u></td>\n                  </tr>\n                  </table>\n                  <p>\n                  <img src={product.memeHash} width=\"800px\" height=\"500px\" alt=\"IPFS ERROR NOT FOUND\" />\n                  </p>\n                  <p>\n                  </p>\n                  <p>\n                    { !product.purchased\n                      ? <button\n                          class=\"myButton\"\n                          name={product.id}\n                          value={product.price}\n                          onClick={(event) => \n                            {\n                              this.purchaseProduct(event.target.name, event.target.value)\n                            }}\n                        >\n                        Buy&nbsp;&nbsp;&nbsp; Price : {window.web3.utils.fromWei(product.price.toString(), 'Ether')} Ether\n                        </button>\n                      : null\n                    }\n                  </p>\n                  <p>\n                &nbsp;&nbsp;&nbsp;\n                </p>\n                  </p>  \n                  );\n                })}\n                </tbody>\n\n                </table>\n               \n                </div>\n            </div>  \n            </main>\n          </div>\n        </div>\n     \n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}